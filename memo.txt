bodyText.match(new RegExp()) - match:몇 개 있는지 찾기. new RegExp:regular expression)
영어에서 주의 - the, they 모두 the가 포함되기 때문에 \\bthe\\b 이렇게 써야 한다.
'g'를 더해주면 하나 찾으면 끝내지 않고 전역 탐색한다는 의미이다.
'i'를 더해주면 대문자와 소문자를 구분하지 않는다는 의미이다.

var bodyText = document.querySelector('body').innerText; // body에 있는 모든 텍스트 가져와서 bodyText에 넣기
var bodyNum = bodyText.split(' ').length; // 모든 단어 추출하고 숫자 세서 그 결과를 bodyNum에 넣기
var myText = '섀클턴'
var myNum = bodyText.match(new RegExp(myText,'gi')).length; // bodyText에서 자신이 알고 있는 단어가 몇 번 등장하는지를 알아본다.
myNum+'/'+bodyNum +' '+ (myNum/bodyNum*100)+'%'

폴더 만들기 - vscode에서 열기. manifest.json 파일 양식 만들고 popup.html 만들기. 

크롬 - 확장 프로그램 - 개발자 모드에서 방금 만든 파일 열면 일단 올라감.

html 꾸미기 위해서 html에서 head부분에 script 만들기 - 자바스크립트 사용하기 위함.

script.js 파일 만들기.

(팝업 페이지에서 문제 생겼을 때 - 아이콘 우클릭 - 팝업 검사 하면 콘솔이 따로 뜸)

기본 script.js는 팝업 창 기준으로 이루어져 있음 - 컨텐츠 페이지를 대상으로 아래와 같은 코드를 실행한다.
-이 안에 있는 코드는 컨텐츠 페이지 대상으로 실행되고, 나머지는 팝업 페이지 대상으로 실행된다.

chrome 객체 사용 - chrome.tabs.executeScript (스크립트 실행하는 명령)

자꾸 <div id="answer"></div>를 인식하지 못하는 이유는 <script>가 앞에 있기 때문에
js가 html보다 먼저 실행되기 때문이었다. 맨 뒤로 보내면 해결된다.

manifest v3 사용 시 chrome.scripting.executeScript를 사용할 때 콜백 함수 대신 
.then 구문을 사용해야 하는데, 이 사용법을 정확히 몰랐다.
func: () => document.querySelector("body").innerText
}).then(result => { (원래 구문)
이런 식으로 사용하여야 한다.

이렇게까지만 하면 Uncaught ReferenceError: tabId is not defined 오류가 나타나는데,
manifest v3에서는 chrome.tabs.executeScript()와 달리 tabId를 직접 참조할 수 없기 때문에
chrome.tabs.query() API를 사용하여 현재 활성 탭의 tabId를 가져온 후, chrome.scripting.executeScript() 함수 호출에서 target 프로퍼티에 tabId를 포함시키는 방법을 사용하였다.
chrome.tabs.query({ active: true, currentWindow: true }, tabs => {
  const tabId = tabs[0].id;
  chrome.scripting.executeScript({
    target: { tabId: tabId },
위와 같이 앞쪽 코드를 변경하였다.

이후에도 bodyText.split(' ') 에서 TypeError: bodyText.split is not a function 오류가 나타나는데,
이는 result의 값 문제였다.
기존에 result 값을 확인해 보면 [object Object]라고 떴는데, 이는 chrome.scripting.executeScript가 반환한 Promise 객체의 해결값이 객체 형태라는 의미이므로, result를 문자열로 변환하여야 했다.
result를 JSON.stringify(result)로 바꿔 사용함으로써 해결하였다.

이 외에 원하는 단어가 하나도 없을 경우 match가 null이 되어 length를 사용할 수 없는 상황이 있었는데 if문으로 해결하였다.

toFixed(n) 소수 n번째 자리까지만 출력.

<input 받기>
addEventListener('change', function() {}) - 값이 변경되었을 때 function 실행 

chrome storage 사용 - 계정만 같으면 다른 컴퓨터에서도 저장된 값 사용 가능.
chrome.storage.sync.set({userWords:user}) - userWords에 아까 받은 user 값 저장. 이러면 storage에 저장됨. 
chrome.storage.sync.get(function (data) {console.log(data)}) 사용 시 콘솔에서 확인 가능. 
chrome.storage.sync.get(function (data) {document.querySelector('#user').value = data.userWords;}) 
- data.userWords에 있는 값 가져와서 미리 넣어놓기 - 이전에 썼던 값 저장했다가 다시 출력해주는 기능.

이전 값에 대한 퍼센트도 바로 출력하기 - chrome.tabs.query 부분부터 복붙. 다만 user부분이 다른 값이 들어가기 때문에 이전에
user = data.userWords로 바꿔주어야 함.